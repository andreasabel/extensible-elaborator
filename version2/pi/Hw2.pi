module Hw2 where
-- First: read section 7.2 of the lecture notes about how
-- propositional equality works in pi-forall. The key points are
-- that `Refl` is a proof of the identity type `(a = b)` when
-- a is definitionally equal to b, and that `subst` is the elimination
-- form.

-- For example, we can show that equality is symmetric by
-- eliminating pf (of type `x = y`) when type checking
-- `Refl` against type `y = x`.  The `subst` adds the definition
-- `x = y` to the context, so both sides of `y = x` wh normalize to y.

sym : (A:Type) -> (x:A) -> (y:A) -> (x = y) -> y = x
sym = \ A x y pf .
  subst Refl by pf

-- Homework: show that propositional equality is transitive

trans : (A:Type) -> (x:A) -> (y:A) -> (z:A) -> (x = z) -> (z = y) -> (x = y)
trans = \a x y z e1 e2. subst e2 by e1

-- Homework: show that it is congruent for (nondependent) application

f_cong : (A:Type) -> (B : Type) -> (f : A -> B) -> (g : A -> B)
       -> (x:A) -> (y:A)
       -> (f = g) -> (x = y) -> (f x = g y)
f_cong = TRUSTME

-- Homework: what does congruence for dependent application look like?
-- In other words, what if f and g above have a dependent type?




-- properties of booleans

-- an encoding of logical falsity
void : Type
void = (A:Type) -> A

neg : Type -> Type
neg = \ A . ( (A) -> void )

not : Bool -> Bool
not = \ x . if x then False else True

-- show that true is not false

not_not_equal : (b : Bool) -> (b = not b) -> void
not_not_equal = \b r. if b then contra r else contra r


not_false_then_true : (b : Bool) -> neg (b = False) -> b = True
not_false_then_true = \b n. if b then (Refl : b = True) else (n (Refl : b = False)) (b = True)

-- show that decidable equality for booleans is correct.

eq_bool : Bool -> Bool -> Bool
eq_bool = \x y. if x then y else not y

eq_true : (b1 : Bool) -> (b2 : Bool) -> eq_bool b1 b2 = True -> (b1 = b2)
eq_true = \b1 b2 pf. if b1
                     then (if b2 then Refl else (contra pf))
                     else (if b2 then (contra pf) else Refl)

eq_false : (b1 : Bool) -> (b2 : Bool) -> eq_bool b1 b2 = False -> (b1 = b2) -> void
eq_false = \b1 b2 pe qe. if b1
                         then (if b2 then (contra pe) else (contra qe))
                         else (if b2 then (contra qe) else (contra pe))

false_eq_bool : (n : Bool) -> (m : Bool) ->
     neg (n = m) ->
     eq_bool n m = False
false_eq_bool = \n m nnm. if n
                          then (if m then (nnm Refl (eq_bool n m = False)) else (Refl))
                          else (if m then (Refl) else (nnm Refl (eq_bool n m = False)))
